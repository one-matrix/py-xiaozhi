import{_ as a,c as i,o as n,ae as l}from"./chunks/framework.BGWP4WZ_.js";const p="/py-xiaozhi/assets/%E5%94%A4%E9%86%92%E8%AF%8D.nPKMgaAa.png",g=JSON.parse('{"title":"旧版使用文档","description":"py-xiaozhi项目的旧版使用文档，提供早期版本的使用指南","frontmatter":{"title":"旧版使用文档","description":"py-xiaozhi项目的旧版使用文档，提供早期版本的使用指南","outline":"deep"},"headers":[],"relativePath":"guide/old_docs/使用文档.md","filePath":"guide/old_docs/使用文档.md"}'),t={name:"guide/old_docs/使用文档.md"};function e(h,s,k,o,d,r){return n(),i("div",null,s[0]||(s[0]=[l(`<h1 id="py-xiaozhi使用文档-请认真阅读使用文档" tabindex="-1">py-xiaozhi使用文档（请认真阅读使用文档） <a class="header-anchor" href="#py-xiaozhi使用文档-请认真阅读使用文档" aria-label="Permalink to &quot;py-xiaozhi使用文档（请认真阅读使用文档）&quot;">​</a></h1><p><img src="https://github.com/user-attachments/assets/df8bd5d2-a8e6-4203-8084-46789fc8e9ad" alt="Image"></p><h2 id="使用介绍" tabindex="-1">使用介绍 <a class="header-anchor" href="#使用介绍" aria-label="Permalink to &quot;使用介绍&quot;">​</a></h2><ul><li>语音模式分为两种长按对话和自动对话，右下角按钮显示的是当前模式</li><li>长按对话：按住说话松手发送</li><li>自动对话：点击开始对话即可，当界面显示聆听中就表示到你说话了，说完会自行发送</li><li>gui模式： <ul><li>F2 键：长按说话</li><li>F3 键：打断对话</li></ul></li><li>cli模式 <ul><li>F2 键：按一次开始自动对话</li><li>F3 键：打断对话</li></ul></li></ul><h2 id="配置说明" tabindex="-1">配置说明 <a class="header-anchor" href="#配置说明" aria-label="Permalink to &quot;配置说明&quot;">​</a></h2><h3 id="项目基础配置" tabindex="-1">项目基础配置 <a class="header-anchor" href="#项目基础配置" aria-label="Permalink to &quot;项目基础配置&quot;">​</a></h3><h4 id="配置文件说明" tabindex="-1">配置文件说明 <a class="header-anchor" href="#配置文件说明" aria-label="Permalink to &quot;配置文件说明&quot;">​</a></h4><p>项目使用两种配置方式：初始配置模板和运行时配置文件。</p><ol><li><p><strong>初始配置模板</strong></p><ul><li>位置：<code>/src/utils/config_manager.py</code></li><li>作用：提供默认配置模板，首次运行时会自动生成配置文件</li><li>使用场景：首次运行或需要重置配置时修改此文件</li></ul></li><li><p><strong>运行时配置文件</strong></p><ul><li>位置：<code>/config/config.json</code></li><li>作用：存储实际运行时的配置信息</li><li>使用场景：日常使用时修改此文件</li></ul></li></ol><h4 id="配置项说明" tabindex="-1">配置项说明 <a class="header-anchor" href="#配置项说明" aria-label="Permalink to &quot;配置项说明&quot;">​</a></h4><ul><li>需要什么加什么配置通过config_manager去获取就行了，参考websocket或iot\\things\\temperature_sensor.py</li><li>例如获取 &quot;MQTT_INFO&quot;的&quot;endpoint&quot; , 通过这样 <code>config.get_config(&quot;MQTT_INFO.endpoint&quot;)</code>就能拿到<strong>endpoint</strong></li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;CLIENT_ID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;自动生成的客户端ID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;DEVICE_ID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;设备MAC地址&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;NETWORK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;OTA_VERSION_URL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OTA更新地址&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;WEBSOCKET_URL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;WebSocket服务器地址&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;WEBSOCKET_ACCESS_TOKEN&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;访问令牌&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;MQTT_INFO&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;endpoint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MQTT服务器地址&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;client_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MQTT客户端ID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MQTT用户名&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MQTT密码&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;publish_topic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;发布主题&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;subscribe_topic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;订阅主题&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;USE_WAKE_WORD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否启用语音唤醒</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;WAKE_WORDS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [                  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 唤醒词列表</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;小智&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;你好小明&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;WAKE_WORD_MODEL_PATH&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./models/vosk-model-small-cn-0.22&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 唤醒模型路径</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;TEMPERATURE_SENSOR_MQTT_INFO&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;endpoint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你的Mqtt地址&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1883</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dtwin@123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;publish_topic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sensors/temperature/command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;subscribe_topic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sensors/temperature/device_001/state&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;CAMERA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 视觉配置</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;camera_index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;frame_width&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">640</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;frame_height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">480</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;fps&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;Local_VL_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://open.bigmodel.cn/api/paas/v4/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 智普的申请地址 https://open.bigmodel.cn/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;VLapi_key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你的key&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...可以添加任意配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="配置修改指南" tabindex="-1">配置修改指南 <a class="header-anchor" href="#配置修改指南" aria-label="Permalink to &quot;配置修改指南&quot;">​</a></h4><ol><li><p><strong>首次使用配置</strong></p><ul><li>直接运行程序，系统会自动生成默认配置文件</li><li>如需修改默认值，可编辑 <code>config_manager.py</code> 中的 <code>DEFAULT_CONFIG</code></li></ul></li><li><p><strong>更换服务器配置</strong></p><ul><li><p>打开 <code>/config/config.json</code></p></li><li><p>修改 <code>NETWORK.WEBSOCKET_URL</code> 为新的服务器地址</p></li><li><p>示例：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;NETWORK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;WEBSOCKET_URL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ws://你的服务器地址:端口号/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li><li><p><strong>启用语音唤醒</strong></p><ul><li>修改 <code>USE_WAKE_WORD</code> 为 <code>true</code></li><li>可在 <code>WAKE_WORDS</code> 数组中添加或修改唤醒词</li></ul></li></ol><h4 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h4><ul><li>修改配置文件后需要重启程序才能生效</li><li>WebSocket URL 必须以 <code>ws://</code> 或 <code>wss://</code> 开头</li><li>首次运行时会自动生成 CLIENT_ID，建议不要手动修改</li><li>DEVICE_ID 默认使用设备MAC地址，可按需修改</li><li>配置文件使用 UTF-8 编码，请使用支持 UTF-8 的编辑器修改</li></ul><h2 id="启动说明" tabindex="-1">启动说明 <a class="header-anchor" href="#启动说明" aria-label="Permalink to &quot;启动说明&quot;">​</a></h2><h3 id="系统依赖安装" tabindex="-1">系统依赖安装 <a class="header-anchor" href="#系统依赖安装" aria-label="Permalink to &quot;系统依赖安装&quot;">​</a></h3><h4 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h4><ol><li><p><strong>安装 FFmpeg</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方法一：使用 Scoop 安装（推荐）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scoop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ffmpeg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方法二：手动安装</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. 访问 https://github.com/BtbN/FFmpeg-Builds/releases 下载</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. 解压并将 bin 目录添加到系统 PATH</span></span></code></pre></div></li><li><p><strong>Opus 音频编解码库</strong></p><ul><li>项目默认会自动引入 opus.dll，无需手动安装</li><li>如遇问题，可将 <code>/libs/windows/opus.dll</code> 复制到以下位置之一： <ul><li>应用程序目录</li><li><code>C:\\Windows\\System32</code></li></ul></li></ul></li></ol><h4 id="linux-debian-ubuntu" tabindex="-1">Linux (Debian/Ubuntu) <a class="header-anchor" href="#linux-debian-ubuntu" aria-label="Permalink to &quot;Linux (Debian/Ubuntu)&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装系统依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3-pyaudio</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> portaudio19-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ffmpeg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libopus0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libopus-dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装音量控制依赖（以下三选一）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. PulseAudio 工具（推荐）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pulseaudio-utils</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. 或者 ALSA 工具</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alsa-utils</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. 如果需要使用 alsamixer 方式，还需要安装 expect</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alsa-utils</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> expect</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build-essential</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3-dev</span></span></code></pre></div><h4 id="macos" tabindex="-1">macOS <a class="header-anchor" href="#macos" aria-label="Permalink to &quot;macOS&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 Homebrew 安装系统依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> portaudio</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> opus</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python-tk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ffmpeg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gfortran</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upgrade</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tcl-tk</span></span></code></pre></div><h3 id="python-依赖安装" tabindex="-1">Python 依赖安装 <a class="header-anchor" href="#python-依赖安装" aria-label="Permalink to &quot;Python 依赖安装&quot;">​</a></h3><h4 id="方式一-使用-venv-推荐" tabindex="-1">方式一：使用 venv（推荐） <a class="header-anchor" href="#方式一-使用-venv-推荐" aria-label="Permalink to &quot;方式一：使用 venv（推荐）&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. 创建虚拟环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .venv</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. 激活虚拟环境</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Windows</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.venv\\Scripts\\activate</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Linux/macOS</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .venv/bin/activate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Windows/Linux</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://mirrors.aliyun.com/pypi/simple</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># macOS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements_mac.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://mirrors.aliyun.com/pypi/simple</span></span></code></pre></div><h4 id="方式二-使用-conda" tabindex="-1">方式二：使用 Conda <a class="header-anchor" href="#方式二-使用-conda" aria-label="Permalink to &quot;方式二：使用 Conda&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. 创建 Conda 环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">conda</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> py-xiaozhi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.12</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. 激活环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">conda</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> activate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> py-xiaozhi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. 安装 Conda 特定依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">conda</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> conda-forge::libopus</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">conda</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> conda-forge::ffmpeg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 4. 安装 Python 依赖</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Windows/Linux</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://mirrors.aliyun.com/pypi/simple</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># macOS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements_mac.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://mirrors.aliyun.com/pypi/simple</span></span></code></pre></div><h3 id="唤醒词模型" tabindex="-1">唤醒词模型 <a class="header-anchor" href="#唤醒词模型" aria-label="Permalink to &quot;唤醒词模型&quot;">​</a></h3><ul><li><a href="https://alphacephei.com/vosk/models" target="_blank" rel="noreferrer">唤醒词模型下载</a></li><li>下载完成后解压放至根目录/models</li><li>默认读取vosk-model-small-cn-0.22小模型</li><li><img src="`+p+`" alt="Image"></li></ul><h3 id="iot功能说明" tabindex="-1">IoT功能说明 <a class="header-anchor" href="#iot功能说明" aria-label="Permalink to &quot;IoT功能说明&quot;">​</a></h3><h4 id="iot模块结构" tabindex="-1">IoT模块结构 <a class="header-anchor" href="#iot模块结构" aria-label="Permalink to &quot;IoT模块结构&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├── iot                          # IoT设备相关模块</span></span>
<span class="line"><span>│   ├── things                   # 具体设备实现目录</span></span>
<span class="line"><span>│   │   ├── lamp.py              # 智能灯控制实现</span></span>
<span class="line"><span>│   │   │   └── Lamp             # 灯设备类，提供开关、调节亮度、改变颜色等功能</span></span>
<span class="line"><span>│   │   ├── music_player.py      # 音乐播放器实现</span></span>
<span class="line"><span>│   │   │   └── MusicPlayer      # 音乐播放器类，提供播放、暂停、切换歌曲等功能</span></span>
<span class="line"><span>│   │   └── speaker.py           # 音量控制实现</span></span>
<span class="line"><span>│   │       └── Speaker          # 扬声器类，提供音量调节、静音等功能</span></span>
<span class="line"><span>│   ├── thing.py                 # IoT设备基类定义</span></span>
<span class="line"><span>│   │   ├── Thing                # 所有IoT设备的抽象基类</span></span>
<span class="line"><span>│   │   ├── Property             # 设备属性类，定义设备的可变状态</span></span>
<span class="line"><span>│   │   ├── Action               # 设备动作类，定义设备可执行的操作</span></span>
<span class="line"><span>│   │   └── Event                # 设备事件类，定义设备可触发的事件</span></span>
<span class="line"><span>│   └── thing_manager.py         # IoT设备管理器（统一管理各类设备）</span></span>
<span class="line"><span>│       └── ThingManager         # 单例模式实现的设备管理器，负责设备注册、查找和命令分发</span></span></code></pre></div><h4 id="iot-状态流转" tabindex="-1">Iot 状态流转 <a class="header-anchor" href="#iot-状态流转" aria-label="Permalink to &quot;Iot 状态流转&quot;">​</a></h4><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>                                  +----------------+</span></span>
<span class="line"><span>                                  |    用户语音    |</span></span>
<span class="line"><span>                                  |     指令      |</span></span>
<span class="line"><span>                                  +-------+-------+</span></span>
<span class="line"><span>                                          |</span></span>
<span class="line"><span>                                          v</span></span>
<span class="line"><span>                                  +-------+-------+</span></span>
<span class="line"><span>                                  |   语音识别    |</span></span>
<span class="line"><span>                                  |   (STT)      |</span></span>
<span class="line"><span>                                  +-------+-------+</span></span>
<span class="line"><span>                                          |</span></span>
<span class="line"><span>                                          v</span></span>
<span class="line"><span>                                  +-------+-------+</span></span>
<span class="line"><span>                                  |  LLM处理指令  |</span></span>
<span class="line"><span>                                  |               |</span></span>
<span class="line"><span>                                  +-------+-------+</span></span>
<span class="line"><span>                                          |</span></span>
<span class="line"><span>                                          v</span></span>
<span class="line"><span>                                  +-------+-------+</span></span>
<span class="line"><span>                                  | 生成物联网命令 |</span></span>
<span class="line"><span>                                  |               |</span></span>
<span class="line"><span>                                  +-------+-------+</span></span>
<span class="line"><span>                                          |</span></span>
<span class="line"><span>                                          v</span></span>
<span class="line"><span>                          +---------------+---------------+</span></span>
<span class="line"><span>                          |     Application接收IoT消息    |</span></span>
<span class="line"><span>                          |    _handle_iot_message()     |</span></span>
<span class="line"><span>                          +---------------+---------------+</span></span>
<span class="line"><span>                                          |</span></span>
<span class="line"><span>                                          v</span></span>
<span class="line"><span>                          +---------------+---------------+</span></span>
<span class="line"><span>                          |    ThingManager.invoke()     |</span></span>
<span class="line"><span>                          +---------------+---------------+</span></span>
<span class="line"><span>                                          |</span></span>
<span class="line"><span>           +------------------+------------------+------------------+</span></span>
<span class="line"><span>           |                  |                  |                  |</span></span>
<span class="line"><span>           v                  v                  v                  v</span></span>
<span class="line"><span>+----------+-------+  +-------+--------+  +------+---------+  +----+-----------+</span></span>
<span class="line"><span>|     Lamp         |  |    Speaker     |  |   MusicPlayer  |  |    CameraVL    |</span></span>
<span class="line"><span>| (控制灯设备)      |  | (控制音量设备)  |  | (播放音乐设备)  |  | (摄像头与视觉) |</span></span>
<span class="line"><span>+----------+-------+  +-------+--------+  +------+---------+  +----+-----------+</span></span>
<span class="line"><span>           |                  |                  |                  |</span></span>
<span class="line"><span>           |                  |                  |                  |</span></span>
<span class="line"><span>           |                  |                  |                  |</span></span>
<span class="line"><span>           |                  |                  |                  v</span></span>
<span class="line"><span>           |                  |                  |           +------+---------+</span></span>
<span class="line"><span>           |                  |                  |           |   Camera.py    |</span></span>
<span class="line"><span>           |                  |                  |           | (摄像头控制)    |</span></span>
<span class="line"><span>           |                  |                  |           +------+---------+</span></span>
<span class="line"><span>           |                  |                  |                  |</span></span>
<span class="line"><span>           |                  |                  |                  v</span></span>
<span class="line"><span>           |                  |                  |           +------+---------+</span></span>
<span class="line"><span>           |                  |                  |           |     VL.py      |</span></span>
<span class="line"><span>           |                  |                  |           | (视觉识别处理)  |</span></span>
<span class="line"><span>           |                  |                  |           +------+---------+</span></span>
<span class="line"><span>           |                  |                  |                  |</span></span>
<span class="line"><span>           +------------------+------------------+------------------+</span></span>
<span class="line"><span>                                          |</span></span>
<span class="line"><span>                                          v</span></span>
<span class="line"><span>                          +---------------+---------------+</span></span>
<span class="line"><span>                          |        执行设备操作           |</span></span>
<span class="line"><span>                          +---------------+---------------+</span></span>
<span class="line"><span>                                          |</span></span>
<span class="line"><span>                                          v</span></span>
<span class="line"><span>                          +---------------+---------------+</span></span>
<span class="line"><span>                          |        更新设备状态           |</span></span>
<span class="line"><span>                          |    _update_iot_states()      |</span></span>
<span class="line"><span>                          +---------------+---------------+</span></span>
<span class="line"><span>                                          |</span></span>
<span class="line"><span>                                          v</span></span>
<span class="line"><span>                          +---------------+---------------+</span></span>
<span class="line"><span>                          |     发送状态更新到服务器      |</span></span>
<span class="line"><span>                          |   send_iot_states(states)    |</span></span>
<span class="line"><span>                          +---------------+---------------+</span></span>
<span class="line"><span>                                          |</span></span>
<span class="line"><span>                                          v</span></span>
<span class="line"><span>                          +---------------+---------------+</span></span>
<span class="line"><span>                          |      服务器更新设备状态       |</span></span>
<span class="line"><span>                          +---------------+---------------+</span></span>
<span class="line"><span>                                          |</span></span>
<span class="line"><span>                                          v</span></span>
<span class="line"><span>                          +---------------+---------------+</span></span>
<span class="line"><span>                          |       返回执行结果给用户      |</span></span>
<span class="line"><span>                          |      (语音或界面反馈)        |</span></span>
<span class="line"><span>                          +-------------------------------+</span></span></code></pre></div><h4 id="iot设备管理" tabindex="-1">IoT设备管理 <a class="header-anchor" href="#iot设备管理" aria-label="Permalink to &quot;IoT设备管理&quot;">​</a></h4><ul><li>IoT模块采用灵活的多协议通信架构： <ul><li>MQTT协议：用于与标准物联网设备通信，如智能灯、空调等</li><li>HTTP协议：用于与Web服务交互，如获取在线音乐、调用多模态AI模型等</li><li>可扩展支持其他协议：如WebSocket、TCP等</li></ul></li><li>支持自动发现和管理IoT设备</li><li>可通过语音命令控制IoT设备，例如： <ul><li>&quot;查看当前物联网设备&quot;</li><li>&quot;打开客厅的灯&quot;</li><li>&quot;关闭空调&quot;</li><li>&quot;设置温度为26度&quot;</li><li>&quot;打开摄像头&quot;</li><li>&quot;关闭摄像头&quot;</li><li>&quot;识别画面&quot;</li></ul></li></ul><h4 id="添加新的iot设备" tabindex="-1">添加新的IoT设备 <a class="header-anchor" href="#添加新的iot设备" aria-label="Permalink to &quot;添加新的IoT设备&quot;">​</a></h4><ol><li>在<code>src/iot/things</code>目录下创建新的设备类</li><li>继承<code>Thing</code>基类并实现必要方法</li><li>在<code>thing_manager.py</code>中注册新设备</li></ol><h3 id="注意事项-1" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项-1" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ol><li>确保相应的服务器配置正确且可访问： <ul><li>MQTT服务器配置（用于物联网设备）</li><li>API接口地址（用于HTTP服务）</li></ul></li><li>不同协议的设备/服务需实现对应的连接和通信逻辑</li><li>建议为每个新增设备/服务添加基本的错误处理和重连机制</li><li>可以通过扩展Thing基类来支持新的通信协议</li><li>在添加新设备时，建议先进行通信测试，确保连接稳定</li></ol><h4 id="在线音乐配置" tabindex="-1">在线音乐配置 <a class="header-anchor" href="#在线音乐配置" aria-label="Permalink to &quot;在线音乐配置&quot;">​</a></h4><ul><li>接入在线音源了，无需自行配置默认可用</li></ul><h3 id="运行模式说明" tabindex="-1">运行模式说明 <a class="header-anchor" href="#运行模式说明" aria-label="Permalink to &quot;运行模式说明&quot;">​</a></h3><h4 id="gui-模式运行-默认" tabindex="-1">GUI 模式运行（默认） <a class="header-anchor" href="#gui-模式运行-默认" aria-label="Permalink to &quot;GUI 模式运行（默认）&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.py</span></span></code></pre></div><h4 id="cli模式运行" tabindex="-1">CLI模式运行 <a class="header-anchor" href="#cli模式运行" aria-label="Permalink to &quot;CLI模式运行&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.py</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cli</span></span></code></pre></div><h4 id="构建打包" tabindex="-1">构建打包 <a class="header-anchor" href="#构建打包" aria-label="Permalink to &quot;构建打包&quot;">​</a></h4><p>使用PyInstaller打包为可执行文件：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Windows</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/build.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># macOS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/build.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Linux</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/build.py</span></span></code></pre></div><h3 id="注意事项-2" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项-2" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ol><li>建议使用 Python 3.9.13+ 版本，推荐 3.12</li><li>Windows 用户无需手动安装 opus.dll，项目会自动处理</li><li>使用 Conda 环境时必须安装 ffmpeg 和 Opus</li><li>使用 Conda 环境时请勿和esp32-server共用同一个Conda环境，因为服务端websocket依赖版本高于本项目</li><li>建议使用国内镜像源安装依赖，可以提高下载速度</li><li>macOS 用户需使用专门的 requirements_mac.txt</li><li>确保系统依赖安装完成后再安装 Python 依赖</li><li>如若使用xiaozhi-esp32-server作为服务端该项目只能自动对话才有反应</li><li>esp32-server视频部署教程 <a href="https://www.bilibili.com/video/BV1GvQWYZEd2/?share_source=copy_web&amp;vd_source=86370b0cff2da3ab6e3d26eb1cab13d3" target="_blank" rel="noreferrer">新版！小智ai服务端本地部署完整教程，支持DeepSeek接入</a></li><li>音量控制功能需要安装特定依赖，程序会在启动时自动检查并提示缺少的依赖</li></ol><h3 id="音量控制功能说明" tabindex="-1">音量控制功能说明 <a class="header-anchor" href="#音量控制功能说明" aria-label="Permalink to &quot;音量控制功能说明&quot;">​</a></h3><p>本应用支持调整系统音量，根据不同操作系统需要安装不同的依赖：</p><ol><li><strong>Windows</strong>: 使用 pycaw 和 comtypes 控制系统音量</li><li><strong>macOS</strong>: 使用 applescript 控制系统音量</li><li><strong>Linux</strong>: 根据系统环境使用 pactl (PulseAudio)、wpctl (PipeWire)、amixer (ALSA) 或 alsamixer 控制音量</li></ol><p>应用程序会在启动时自动检查这些依赖是否已安装。如果缺少依赖，将会显示相应的安装指令。</p><h4 id="音量控制使用方法" tabindex="-1">音量控制使用方法 <a class="header-anchor" href="#音量控制使用方法" aria-label="Permalink to &quot;音量控制使用方法&quot;">​</a></h4><ul><li><strong>GUI模式</strong>: 使用界面上的音量滑块调节音量</li><li><strong>CLI模式</strong>: 使用 <code>v &lt;音量值&gt;</code> 命令调节音量，例如 <code>v 50</code> 将音量设置为50%</li></ul><h3 id="状态流转图" tabindex="-1">状态流转图 <a class="header-anchor" href="#状态流转图" aria-label="Permalink to &quot;状态流转图&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>                        +----------------+</span></span>
<span class="line"><span>                        |                |</span></span>
<span class="line"><span>                        v                |</span></span>
<span class="line"><span>+------+  唤醒词/按钮  +------------+   |   +------------+</span></span>
<span class="line"><span>| IDLE | -----------&gt; | CONNECTING | --+-&gt; | LISTENING  |</span></span>
<span class="line"><span>+------+              +------------+       +------------+</span></span>
<span class="line"><span>   ^                                            |</span></span>
<span class="line"><span>   |                                            | 语音识别完成</span></span>
<span class="line"><span>   |          +------------+                    v</span></span>
<span class="line"><span>   +--------- |  SPEAKING  | &lt;-----------------+</span></span>
<span class="line"><span>     完成播放 +------------+</span></span></code></pre></div><h2 id="获取帮助" tabindex="-1">获取帮助 <a class="header-anchor" href="#获取帮助" aria-label="Permalink to &quot;获取帮助&quot;">​</a></h2><p>如果遇到问题：</p><ol><li>优先查看 docs/异常汇总.md 文档</li><li>通过 GitHub Issues 提交问题</li><li>通过 AI 助手寻求帮助</li><li>联系作者(主页有微信)（请自备 Todesk 链接并说明来意，作者工作日晚上处理）</li></ol>`,65)]))}const F=a(t,[["render",e]]);export{g as __pageData,F as default};
