import{_ as a,c as i,o as n,ae as l}from"./chunks/framework.BGWP4WZ_.js";const t="/py-xiaozhi/assets/%E8%81%9A%E5%90%88%E8%AE%BE%E5%A4%87.Dk0JYaBz.png",e="/py-xiaozhi/assets/%E5%A4%9A%E8%AE%BE%E5%A4%87.BxYz-s0T.png",h="/py-xiaozhi/assets/%E7%B3%BB%E7%BB%9F%E6%89%AC%E5%A3%B0%E5%99%A8%E9%80%89%E6%8B%A9.C--OftRo.png",F=JSON.parse('{"title":"回声消除 (AEC) 配置指南","description":"","frontmatter":{},"headers":[],"relativePath":"guide/回声消除.md","filePath":"guide/回声消除.md"}'),p={name:"guide/回声消除.md"};function k(r,s,o,d,c,g){return n(),i("div",null,s[0]||(s[0]=[l(`<h1 id="回声消除-aec-配置指南" tabindex="-1">回声消除 (AEC) 配置指南 <a class="header-anchor" href="#回声消除-aec-配置指南" aria-label="Permalink to &quot;回声消除 (AEC) 配置指南&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>回声消除（Acoustic Echo Cancellation，AEC）是语音交互中的关键技术，用于消除扬声器播放时产生的回声干扰。当系统播放音频时，麦克风会同时捕获到播放内容，导致语音识别准确性下降。</p><p><strong>AEC 的工作原理：</strong></p><ul><li>捕获麦克风输入的音频信号（包含用户语音 + 回声）</li><li>获取扬声器播放的参考信号</li><li>使用算法从麦克风信号中减去预测的回声成分</li><li>输出干净的用户语音信号</li></ul><h2 id="平台支持架构" tabindex="-1">平台支持架构 <a class="header-anchor" href="#平台支持架构" aria-label="Permalink to &quot;平台支持架构&quot;">​</a></h2><p>py-xiaozhi 采用跨平台自适应策略，根据不同操作系统的特性选择最优解决方案：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>                    ┌─────────────────┐</span></span>
<span class="line"><span>                    │   py-xiaozhi    │</span></span>
<span class="line"><span>                    │  AEC Processor  │</span></span>
<span class="line"><span>                    └─────────┬───────┘</span></span>
<span class="line"><span>                              │</span></span>
<span class="line"><span>                    ┌─────────▼───────┐</span></span>
<span class="line"><span>                    │  Platform Check │</span></span>
<span class="line"><span>                    └─┬─────┬─────┬───┘</span></span>
<span class="line"><span>            ┌─────────▼─┐ ┌─▼───┐ ┌▼──────────┐</span></span>
<span class="line"><span>            │  Windows  │ │Linux│ │   macOS   │</span></span>
<span class="line"><span>            │ 系统级AEC │ │PA-AEC│ │WebRTC+BH │</span></span>
<span class="line"><span>            └───────────┘ └─────┘ └───────────┘</span></span>
<span class="line"><span>                 │           │         │</span></span>
<span class="line"><span>            ┌────▼────┐ ┌────▼───┐ ┌───▼────┐</span></span>
<span class="line"><span>            │开箱即用 │ │一次配置│ │需要配置│</span></span>
<span class="line"><span>            └─────────┘ └────────┘ └────────┘</span></span></code></pre></div><h3 id="🪟-windows-平台" tabindex="-1">🪟 Windows 平台 <a class="header-anchor" href="#🪟-windows-平台" aria-label="Permalink to &quot;🪟 Windows 平台&quot;">​</a></h3><ul><li><strong>方案</strong>: 系统级驱动层AEC</li><li><strong>优势</strong>: 零配置，开箱即用</li><li><strong>原理</strong>: 音频驱动已处理回声消除</li><li><strong>性能</strong>: 最低延迟，无额外开销</li></ul><h3 id="🐧-linux-平台" tabindex="-1">🐧 Linux 平台 <a class="header-anchor" href="#🐧-linux-平台" aria-label="Permalink to &quot;🐧 Linux 平台&quot;">​</a></h3><ul><li><strong>方案</strong>: PulseAudio模块化AEC</li><li><strong>优势</strong>: 系统级处理，应用透明</li><li><strong>原理</strong>: module-echo-cancel + WebRTC算法</li><li><strong>配置</strong>: 一次性配置，持久生效</li></ul><h3 id="🍎-macos-平台" tabindex="-1">🍎 macOS 平台 <a class="header-anchor" href="#🍎-macos-平台" aria-label="Permalink to &quot;🍎 macOS 平台&quot;">​</a></h3><ul><li><strong>方案</strong>: WebRTC + BlackHole虚拟设备</li><li><strong>优势</strong>: 实时处理，效果可控</li><li><strong>原理</strong>: 应用层实时算法处理</li><li><strong>配置</strong>: 需安装虚拟音频设备</li></ul><hr><h1 id="🐧-linux-平台配置" tabindex="-1">🐧 Linux 平台配置 <a class="header-anchor" href="#🐧-linux-平台配置" aria-label="Permalink to &quot;🐧 Linux 平台配置&quot;">​</a></h1><h2 id="系统要求" tabindex="-1">系统要求 <a class="header-anchor" href="#系统要求" aria-label="Permalink to &quot;系统要求&quot;">​</a></h2><table tabindex="0"><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td><strong>操作系统</strong></td><td>基于 PulseAudio 的 Linux 发行版</td></tr><tr><td><strong>测试环境</strong></td><td>Ubuntu 20.04+ / Fedora 35+</td></tr><tr><td><strong>硬件推荐</strong></td><td>外置USB麦克风 + 独立扬声器</td></tr></tbody></table><blockquote><p>⚠️ <strong>硬件建议</strong>: 笔记本内置麦克风+扬声器组合由于物理振动耦合，AEC效果有限</p></blockquote><h2 id="技术架构" tabindex="-1">技术架构 <a class="header-anchor" href="#技术架构" aria-label="Permalink to &quot;技术架构&quot;">​</a></h2><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌─────────────┐    ┌─────────────────┐    ┌──────────────┐</span></span>
<span class="line"><span>│ 物理麦克风  │───▶│  module-echo-   │───▶│ 虚拟设备     │</span></span>
<span class="line"><span>│            │    │  cancel        │    │ echoCancel_  │</span></span>
<span class="line"><span>└─────────────┘    └─────────────────┘    │ source       │</span></span>
<span class="line"><span>                           ▲               └──────┬───────┘</span></span>
<span class="line"><span>┌─────────────┐           │                      │</span></span>
<span class="line"><span>│ 扬声器输出  │───────────┘                      ▼</span></span>
<span class="line"><span>└─────────────┘                          ┌──────────────┐</span></span>
<span class="line"><span>                                         │ py-xiaozhi   │</span></span>
<span class="line"><span>                                         │ 音频输入     │</span></span>
<span class="line"><span>                                         └──────────────┘</span></span></code></pre></div><h2 id="一键配置脚本" tabindex="-1">一键配置脚本 <a class="header-anchor" href="#一键配置脚本" aria-label="Permalink to &quot;一键配置脚本&quot;">​</a></h2><h3 id="下载安装" tabindex="-1">下载安装 <a class="header-anchor" href="#下载安装" aria-label="Permalink to &quot;下载安装&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载配置脚本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/W-E-A/PulseAudio-AEC-Script.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PulseAudio-AEC-Script</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置执行权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> setup_aec.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uninstall_aec.sh</span></span></code></pre></div><h3 id="运行配置" tabindex="-1">运行配置 <a class="header-anchor" href="#运行配置" aria-label="Permalink to &quot;运行配置&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行安装脚本（不要使用sudo）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./setup_aec.sh</span></span></code></pre></div><p><strong>配置流程:</strong></p><ol><li><strong>设备检测</strong> - 脚本扫描所有可用麦克风设备</li><li><strong>设备选择</strong> - 选择目标麦克风（推荐USB外置麦克风）</li><li><strong>模块配置</strong> - 自动配置PulseAudio回声消除模块</li><li><strong>服务重启</strong> - 重启音频服务使配置生效</li></ol><h3 id="系统设置" tabindex="-1">系统设置 <a class="header-anchor" href="#系统设置" aria-label="Permalink to &quot;系统设置&quot;">​</a></h3><p>配置完成后：</p><ol><li>打开系统&quot;声音&quot;设置</li><li><strong>输入设备</strong>: 选择包含 <code>echo cancellation</code> 的虚拟麦克风</li><li><strong>输出设备</strong>: 选择包含 <code>echo cancellation</code> 的虚拟扬声器</li></ol><h3 id="效果验证" tabindex="-1">效果验证 <a class="header-anchor" href="#效果验证" aria-label="Permalink to &quot;效果验证&quot;">​</a></h3><p><img src="https://github.com/W-E-A/PulseAudio-AEC-Script/raw/main/assets/images/AEC_audio_effect.png" alt="AEC 效果对比"></p><h3 id="卸载配置" tabindex="-1">卸载配置 <a class="header-anchor" href="#卸载配置" aria-label="Permalink to &quot;卸载配置&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 恢复原始配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./uninstall_aec.sh</span></span></code></pre></div><h2 id="故障排除" tabindex="-1">故障排除 <a class="header-anchor" href="#故障排除" aria-label="Permalink to &quot;故障排除&quot;">​</a></h2><h3 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h3><p><strong>Q1: 脚本运行后找不到 echo cancellation 设备</strong></p><p>解决方案:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查PulseAudio状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pactl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sources</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> short</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pactl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sinks</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> short</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重启音频服务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pulseaudio</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -k</span></span></code></pre></div><p><strong>Q2: 内置麦克风AEC效果不佳</strong></p><p>原因分析:</p><ul><li>物理振动耦合: 扬声器振动传导至内置麦克风</li><li>设备兼容性: 某些内置设备不支持AEC模块</li></ul><p>建议方案:</p><ul><li>使用外置USB麦克风 + 独立扬声器</li><li>物理隔离振动源</li></ul><p><strong>Q3: 配置后音频延迟增加</strong></p><p>调优方案:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查缓冲区设置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pactl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sources</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo-cancel&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 调整延迟参数（可选）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 编辑 ~/.config/pulse/default.pa</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加: load-module module-echo-cancel aec_args=&#39;&quot;frame_size_ms=8&quot;&#39;</span></span></code></pre></div><hr><h1 id="🍎-macos-平台配置" tabindex="-1">🍎 macOS 平台配置 <a class="header-anchor" href="#🍎-macos-平台配置" aria-label="Permalink to &quot;🍎 macOS 平台配置&quot;">​</a></h1><h2 id="系统要求-1" tabindex="-1">系统要求 <a class="header-anchor" href="#系统要求-1" aria-label="Permalink to &quot;系统要求&quot;">​</a></h2><table tabindex="0"><thead><tr><th>项目</th><th>要求</th></tr></thead><tbody><tr><td><strong>操作系统</strong></td><td>macOS 10.15+</td></tr><tr><td><strong>虚拟音频</strong></td><td>BlackHole 2ch</td></tr><tr><td><strong>Python依赖</strong></td><td>webrtc-audio-processing</td></tr></tbody></table><h2 id="技术架构-1" tabindex="-1">技术架构 <a class="header-anchor" href="#技术架构-1" aria-label="Permalink to &quot;技术架构&quot;">​</a></h2><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌─────────────┐    ┌─────────────────┐    ┌──────────────┐</span></span>
<span class="line"><span>│ 物理麦克风  │───▶│  WebRTC AEC     │───▶│ py-xiaozhi   │</span></span>
<span class="line"><span>│            │    │  实时处理       │    │ 音频输入     │</span></span>
<span class="line"><span>└─────────────┘    └─────────┬───────┘    └──────────────┘</span></span>
<span class="line"><span>                             ▲</span></span>
<span class="line"><span>              ┌──────────────▼───────────────┐</span></span>
<span class="line"><span>              │        聚合设备/多输出        │</span></span>
<span class="line"><span>              └──┬─────────────────────┬─────┘</span></span>
<span class="line"><span>┌─────────────▼─┐                    ┌▼──────────────┐</span></span>
<span class="line"><span>│ 物理扬声器    │                    │ BlackHole 2ch │</span></span>
<span class="line"><span>│ (用户听音)    │                    │ (参考信号)    │</span></span>
<span class="line"><span>└───────────────┘                    └───────────────┘</span></span></code></pre></div><h2 id="安装-blackhole" tabindex="-1">安装 BlackHole <a class="header-anchor" href="#安装-blackhole" aria-label="Permalink to &quot;安装 BlackHole&quot;">​</a></h2><h3 id="方式一-homebrew-安装-推荐" tabindex="-1">方式一：Homebrew 安装（推荐） <a class="header-anchor" href="#方式一-homebrew-安装-推荐" aria-label="Permalink to &quot;方式一：Homebrew 安装（推荐）&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装 BlackHole</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> blackhole-2ch</span></span></code></pre></div><h3 id="方式二-手动安装" tabindex="-1">方式二：手动安装 <a class="header-anchor" href="#方式二-手动安装" aria-label="Permalink to &quot;方式二：手动安装&quot;">​</a></h3><ol><li>访问 <a href="https://github.com/ExistentialAudio/BlackHole" target="_blank" rel="noreferrer">BlackHole 官方页面</a></li><li>下载 BlackHole 2ch 安装包</li><li>运行安装程序并授权</li></ol><h2 id="音频设备配置" tabindex="-1">音频设备配置 <a class="header-anchor" href="#音频设备配置" aria-label="Permalink to &quot;音频设备配置&quot;">​</a></h2><h3 id="步骤1-创建聚合设备" tabindex="-1">步骤1：创建聚合设备 <a class="header-anchor" href="#步骤1-创建聚合设备" aria-label="Permalink to &quot;步骤1：创建聚合设备&quot;">​</a></h3><blockquote><p>如果不行就创建多设备，还是勾选扬声器和blackhole，经查阅资料和ai都是推荐创建聚合设备，但是我实际测试，创建多设备才能正确使用webrtc消除回声</p></blockquote><ol><li>打开&quot;应用程序&quot; → &quot;实用工具&quot; → &quot;音频 MIDI 设置&quot;</li><li>点击左下角&quot;+&quot;号 → &quot;创建聚合设备&quot;</li><li>配置聚合设备： <ul><li>✅ MacBook Air 扬声器（主设备）</li><li>✅ BlackHole 2ch</li><li>采样率：48.0 kHz</li></ul></li></ol><p><img src="`+t+'" alt="聚合设备配置"><img src="'+e+'" alt="多设备配置"></p><blockquote><p>💡 <strong>配置说明</strong>: 聚合设备确保音频同步输出到扬声器和BlackHole，为AEC提供精确的时间对齐</p></blockquote><h3 id="步骤2-系统音频设置" tabindex="-1">步骤2：系统音频设置 <a class="header-anchor" href="#步骤2-系统音频设置" aria-label="Permalink to &quot;步骤2：系统音频设置&quot;">​</a></h3><ol><li>打开&quot;系统偏好设置&quot; → &quot;声音&quot;</li><li><strong>输出</strong>: 选择刚创建的聚合设备</li><li><strong>输入</strong>: 保持默认麦克风设备</li></ol><p><img src="'+h+`" alt="系统音频设置"></p><blockquote><p>⚠️ <strong>音量控制限制</strong>: 聚合设备无法直接调节系统音量，可在音频MIDI设置中调整各子设备音量</p></blockquote><h3 id="步骤3-验证设备可用性" tabindex="-1">步骤3：验证设备可用性 <a class="header-anchor" href="#步骤3-验证设备可用性" aria-label="Permalink to &quot;步骤3：验证设备可用性&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查 BlackHole 设备是否被识别</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">import sounddevice as sd</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">devices = sd.query_devices()</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">for i, device in enumerate(devices):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    if &#39;blackhole&#39; in device[&#39;name&#39;].lower():</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        print(f&#39;[{i}] {device[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]} - {device[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">max_input_channels</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]}ch输入&#39;)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div><h2 id="应用自动配置" tabindex="-1">应用自动配置 <a class="header-anchor" href="#应用自动配置" aria-label="Permalink to &quot;应用自动配置&quot;">​</a></h2><p>py-xiaozhi 启动时自动执行：</p><ol><li><strong>设备检测</strong> - 扫描并识别 BlackHole 2ch 设备</li><li><strong>AEC初始化</strong> - 创建 WebRTC 音频处理实例</li><li><strong>参考信号流</strong> - 建立 BlackHole 音频捕获流</li><li><strong>实时处理</strong> - 启动麦克风音频的回声消除处理</li></ol><h3 id="配置验证" tabindex="-1">配置验证 <a class="header-anchor" href="#配置验证" aria-label="Permalink to &quot;配置验证&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查 AEC 状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src.audio_codecs.audio_codec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AudioCodec</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">codec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AudioCodec()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> codec.initialize()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取 AEC 状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> codec.get_aec_status()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AEC启用: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;enabled&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;参考信号可用: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;reference_available&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="故障排除-1" tabindex="-1">故障排除 <a class="header-anchor" href="#故障排除-1" aria-label="Permalink to &quot;故障排除&quot;">​</a></h2><h3 id="常见问题-1" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题-1" aria-label="Permalink to &quot;常见问题&quot;">​</a></h3><h4 id="q1-blackhole-设备未找到" tabindex="-1">Q1: BlackHole 设备未找到 <a class="header-anchor" href="#q1-blackhole-设备未找到" aria-label="Permalink to &quot;Q1: BlackHole 设备未找到&quot;">​</a></h4><p>解决方案:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重新安装 BlackHole</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reinstall</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> blackhole-2ch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重启 CoreAudio 服务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> launchctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kickstart</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -kp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> system/com.apple.audio.coreaudiod</span></span></code></pre></div><h4 id="q2-聚合设备无法创建" tabindex="-1">Q2: 聚合设备无法创建 <a class="header-anchor" href="#q2-聚合设备无法创建" aria-label="Permalink to &quot;Q2: 聚合设备无法创建&quot;">​</a></h4><p>检查项:</p><ul><li>确认 BlackHole 已正确安装</li><li>重启&quot;音频 MIDI 设置&quot;应用</li><li>检查系统音频权限设置</li></ul><h4 id="q3-aec-效果不佳" tabindex="-1">Q3: AEC 效果不佳 <a class="header-anchor" href="#q3-aec-效果不佳" aria-label="Permalink to &quot;Q3: AEC 效果不佳&quot;">​</a></h4><p>优化建议:</p><ul><li>确保使用聚合设备而非多输出设备</li><li>调整麦克风与扬声器的物理距离</li><li>检查环境噪音水平</li></ul><h4 id="q4-音频延迟过高" tabindex="-1">Q4: 音频延迟过高 <a class="header-anchor" href="#q4-音频延迟过高" aria-label="Permalink to &quot;Q4: 音频延迟过高&quot;">​</a></h4><p>调优方案:</p><ul><li>降低音频缓冲区大小</li><li>使用有线音频设备替代蓝牙</li><li>关闭其他音频处理软件</li></ul><hr><h1 id="🧪-配置验证与测试" tabindex="-1">🧪 配置验证与测试 <a class="header-anchor" href="#🧪-配置验证与测试" aria-label="Permalink to &quot;🧪 配置验证与测试&quot;">​</a></h1><h2 id="状态检查" tabindex="-1">状态检查 <a class="header-anchor" href="#状态检查" aria-label="Permalink to &quot;状态检查&quot;">​</a></h2><h3 id="通用状态验证" tabindex="-1">通用状态验证 <a class="header-anchor" href="#通用状态验证" aria-label="Permalink to &quot;通用状态验证&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动 py-xiaozhi 后检查 AEC 状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src.audio_codecs.audio_codec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AudioCodec</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">codec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AudioCodec()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> codec.initialize()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取详细状态信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> codec.get_aec_status()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AEC启用状态: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;enabled&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;平台类型: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aec_type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;unknown&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;描述: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;description&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;N/A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="平台特定检查" tabindex="-1">平台特定检查 <a class="header-anchor" href="#平台特定检查" aria-label="Permalink to &quot;平台特定检查&quot;">​</a></h3><h4 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查音频驱动AEC支持</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在设备管理器中查看音频设备属性</span></span></code></pre></div><h4 id="linux" tabindex="-1">Linux <a class="header-anchor" href="#linux" aria-label="Permalink to &quot;Linux&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 验证 PulseAudio AEC 模块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pactl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sources</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pactl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sinks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查模块加载状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pactl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo-cancel</span></span></code></pre></div><h4 id="macos" tabindex="-1">macOS <a class="header-anchor" href="#macos" aria-label="Permalink to &quot;macOS&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 验证 BlackHole 设备</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">system_profiler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SPAudioDataType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> blackhole</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查聚合设备</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在音频MIDI设置中确认设备状态</span></span></code></pre></div><h2 id="功能测试" tabindex="-1">功能测试 <a class="header-anchor" href="#功能测试" aria-label="Permalink to &quot;功能测试&quot;">​</a></h2><ul><li>理论上在config.json开启aec后, 选择自动对话，不会自言自语就是正常了，linux和mac需要配置,windows我找了几个人测试都是正常的系统底层已经处理了</li></ul><h2 id="参考资源" tabindex="-1">参考资源 <a class="header-anchor" href="#参考资源" aria-label="Permalink to &quot;参考资源&quot;">​</a></h2><h3 id="官方文档" tabindex="-1">官方文档 <a class="header-anchor" href="#官方文档" aria-label="Permalink to &quot;官方文档&quot;">​</a></h3><ul><li><a href="https://github.com/W-E-A/PulseAudio-AEC-Script" target="_blank" rel="noreferrer">PulseAudio AEC Script</a> - Linux 自动配置脚本</li><li><a href="https://github.com/ExistentialAudio/BlackHole" target="_blank" rel="noreferrer">BlackHole 官方仓库</a> - macOS 虚拟音频设备</li><li><a href="https://webrtc.googlesource.com/src/+/refs/heads/master/modules/audio_processing/" target="_blank" rel="noreferrer">WebRTC Audio Processing</a> - 算法实现文档</li></ul>`,107)]))}const E=a(p,[["render",k]]);export{F as __pageData,E as default};
