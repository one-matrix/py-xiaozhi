import{_ as i,c as t,o as r,ae as l}from"./chunks/framework.BGWP4WZ_.js";const u=JSON.parse('{"title":"小智MCP外挂接入指南","description":"","frontmatter":{},"headers":[],"relativePath":"mcp/xiaozhi-mcp.md","filePath":"mcp/xiaozhi-mcp.md"}'),e={name:"mcp/xiaozhi-mcp.md"};function n(o,a,s,h,p,c){return r(),t("div",null,a[0]||(a[0]=[l(`<h1 id="小智mcp外挂接入指南" tabindex="-1">小智MCP外挂接入指南 <a class="header-anchor" href="#小智mcp外挂接入指南" aria-label="Permalink to &quot;小智MCP外挂接入指南&quot;">​</a></h1><p>本文档介绍如何将外部MCP服务接入小智系统，实现功能扩展和第三方工具集成。</p><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>小智系统除了内置的MCP工具外，还支持接入外部MCP服务器，实现：</p><ul><li>第三方工具集成</li><li>远程服务调用</li><li>分布式工具部署</li><li>社区工具共享</li></ul><h2 id="架构说明" tabindex="-1">架构说明 <a class="header-anchor" href="#架构说明" aria-label="Permalink to &quot;架构说明&quot;">​</a></h2><h3 id="外挂式mcp架构" tabindex="-1">外挂式MCP架构 <a class="header-anchor" href="#外挂式mcp架构" aria-label="Permalink to &quot;外挂式MCP架构&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>小智AI平台        xiaozhi-mcphub        外部MCP服务器        第三方工具</span></span>
<span class="line"><span>┌─────────────┐   ┌─────────────────┐   ┌─────────────────┐   ┌─────────────┐</span></span>
<span class="line"><span>│             │   │                 │   │                 │   │             │</span></span>
<span class="line"><span>│ MCP客户端   │◄──┤ MCP服务器/代理   │◄──┤ MCP服务器       │◄──┤ 实际工具    │</span></span>
<span class="line"><span>│             │   │                 │   │                 │   │             │</span></span>
<span class="line"><span>└─────────────┘   └─────────────────┘   └─────────────────┘   └─────────────┘</span></span></code></pre></div><h3 id="连接方式" tabindex="-1">连接方式 <a class="header-anchor" href="#连接方式" aria-label="Permalink to &quot;连接方式&quot;">​</a></h3><ol><li><strong>标准输入输出 (stdio)</strong>: 启动子进程，通过stdin/stdout管道进行进程间通信，适用于本地CLI工具如Playwright、高德地图等</li><li><strong>服务器推送事件 (SSE)</strong>: 基于HTTP长连接的事件流通信，提供类似WebSocket的实时双向通信能力</li><li><strong>流式HTTP (streamable-http)</strong>: 基于TCP的HTTP协议封装，支持流式数据传输，适用于远程API服务和微服务</li><li><strong>OpenAPI</strong>: 基于标准REST API规范的连接方式，自动解析OpenAPI规范并生成工具接口，适用于标准化的第三方API服务</li></ol><h2 id="相关开源项目" tabindex="-1">相关开源项目 <a class="header-anchor" href="#相关开源项目" aria-label="Permalink to &quot;相关开源项目&quot;">​</a></h2><p>社区开发的小智客户端项目，提供不同平台的接入方式</p><h3 id="xiaozhi-mcphub-本项目配套" tabindex="-1">xiaozhi-mcphub （本项目配套） <a class="header-anchor" href="#xiaozhi-mcphub-本项目配套" aria-label="Permalink to &quot;xiaozhi-mcphub （本项目配套）&quot;">​</a></h3><p><strong>小智MCP Hub</strong> 是专为小智AI平台优化的智能MCP工具桥接系统，基于优秀的MCPHub项目开发，增加了小智平台集成和智能工具同步功能。</p><ul><li><strong>项目地址</strong>: <a href="https://huangjunsen0406.github.io/xiaozhi-mcphub/" target="_blank" rel="noreferrer">xiaozhi-mcphub</a></li><li><strong>GitHub</strong>: <a href="https://github.com/huangjunsen0406/xiaozhi-mcphub" target="_blank" rel="noreferrer">xiaozhi-mcphub</a></li><li><strong>核心功能</strong>: <ul><li><strong>小智AI平台集成</strong>: WebSocket自动工具同步，实时状态更新，协议桥接</li><li><strong>增强的MCP管理</strong>: 支持stdio、SSE、HTTP协议，热插拔配置，集中控制台</li><li><strong>智能工具路由</strong>: 基于向量的智能工具搜索和分组管理</li><li><strong>安全认证机制</strong>: JWT+bcrypt用户管理，角色权限控制</li><li><strong>内置mcp商店</strong>: 多种mcp工具在线安装无需重启支持热更新</li></ul></li></ul><h3 id="xiaozhi-client" tabindex="-1">xiaozhi-client <a class="header-anchor" href="#xiaozhi-client" aria-label="Permalink to &quot;xiaozhi-client&quot;">​</a></h3><ul><li><strong>项目地址</strong>: <a href="https://github.com/shenjingnan/xiaozhi-client" target="_blank" rel="noreferrer">xiaozhi-client</a></li><li><strong>功能</strong>: 小智 AI 客户端，专门用于 MCP 的对接和聚合</li><li><strong>核心特性</strong>: <ul><li><strong>多接入点支持</strong>: 可配置多个小智接入点，实现多设备共享一个MCP配置</li><li><strong>MCP Server聚合</strong>: 通过标准方式聚合多个MCP Server，统一管理</li><li><strong>动态工具控制</strong>: 控制MCP Server工具的可见性，避免工具过多导致的异常</li><li><strong>多种集成方式</strong>: 支持作为普通MCP Server集成到Cursor/Cherry Studio等客户端</li><li><strong>Web可视化配置</strong>: 现代化的Web UI界面，支持远程配置和管理</li><li><strong>ModelScope集成</strong>: 支持ModelScope托管的远程MCP服务</li></ul></li></ul><h3 id="hyperchat" tabindex="-1">HyperChat <a class="header-anchor" href="#hyperchat" aria-label="Permalink to &quot;HyperChat&quot;">​</a></h3><ul><li><strong>项目地址</strong>: <a href="https://github.com/BigSweetPotatoStudio/HyperChat" target="_blank" rel="noreferrer">HyperChat</a></li><li><strong>功能</strong>: 下一代 AI 工作空间，首创&quot;AI as Code&quot;理念的多平台智能协作平台</li><li><strong>核心特性</strong>: <ul><li><strong>AI as Code</strong>: 配置驱动的AI能力管理，支持版本控制和团队协作</li><li><strong>工作区驱动</strong>: 以项目为核心的AI环境隔离和管理</li><li><strong>MCP生态深度集成</strong>: 完整支持MCP协议，丰富的内置工具和动态加载</li><li><strong>多平台统一</strong>: Web应用、Electron桌面、CLI命令行、VSCode插件</li></ul></li><li><strong>技术亮点</strong>: <ul><li>配置化AI智能体系统，支持专业化Agent定制</li><li>多模型并行对比测试（Claude、OpenAI、Gemini等）</li><li>智能内容渲染（Artifacts、Mermaid、数学公式）</li><li>定时任务和工作流自动化</li></ul></li></ul>`,19)]))}const d=i(e,[["render",n]]);export{u as __pageData,d as default};
